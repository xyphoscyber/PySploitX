from pymongo import MongoClient
from pymongo.errors import ConnectionFailure
from core.base_module import BaseModule
from rich.console import Console

class MongodbUnauth(BaseModule):
    """Checks for unauthenticated access to a MongoDB server."""

    def get_options(self):
        """
        Returns the options for this module.
        """
        return {
            'RHOST': ['', 'The target host IP address.'],
            'RPORT': [27017, 'The target port.']
        }

    def run(self, options):
        """
        Executes the MongoDB unauthenticated access check.
        """
        rhost = options.get('RHOST')
        rport = int(options.get('RPORT'))
        console = Console()

        if not rhost:
            console.print("[!] RHOST must be set.", style="bold red")
            return

        console.print(f"[*] Checking for unauthenticated MongoDB access on {rhost}:{rport}...")

        client = None
        try:
            client = MongoClient(rhost, rport, serverSelectionTimeoutMS=5000)
            # The ismaster command is cheap and does not require auth.
            client.admin.command('ismaster')
            console.print("[*] Successfully connected to the MongoDB server.")

            # Now, try to list databases, which requires privileges.
            db_list = client.list_database_names()
            console.print("[bold green][+] Success! Unauthenticated access is possible.[/bold green]")
            console.print("[*] Available databases:")
            for db in db_list:
                console.print(f"  - {db}")

        except ConnectionFailure as e:
            console.print(f"[!] Could not connect to MongoDB: {e}", style="bold red")
        except Exception as e:
            # This exception often means auth is required.
            if "command listDatabases requires authentication" in str(e):
                console.print("[yellow][-] The server requires authentication.[/yellow]")
            else:
                console.print(f"[!] An error occurred: {e}", style="bold red")
        finally:
            if client:
                client.close()
