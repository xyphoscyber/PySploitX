import redis
from core.base_module import BaseModule
from rich.console import Console
from rich.table import Table

class RedisUnauth(BaseModule):
    """Checks for unauthenticated access to a Redis server."""

    def get_options(self):
        """
        Returns the options for this module.
        """
        return {
            'RHOST': ['', 'The target host IP address.'],
            'RPORT': [6379, 'The target port.']
        }

    def run(self, options):
        """
        Executes the Redis unauthenticated access check.
        """
        rhost = options.get('RHOST')
        rport = int(options.get('RPORT'))
        console = Console()

        if not rhost:
            console.print("[!] RHOST must be set.", style="bold red")
            return

        console.print(f"[*] Checking for unauthenticated Redis access on {rhost}:{rport}...")

        try:
            r = redis.Redis(host=rhost, port=rport, socket_connect_timeout=5)
            info = r.info()
            console.print("[bold green][+] Success! Unauthenticated access is possible.[/bold green]")

            table = Table(title="Redis Server Information", show_header=True, header_style="bold magenta")
            table.add_column("Property", style="dim", width=25)
            table.add_column("Value")

            interesting_keys = ['redis_version', 'os', 'arch_bits', 'process_id', 'tcp_port', 'uptime_in_days']
            for key in interesting_keys:
                if key in info:
                    table.add_row(key, str(info[key]))
            
            console.print(table)

        except redis.exceptions.AuthenticationError:
            console.print("[yellow][-] The server requires authentication.[/yellow]")
        except redis.exceptions.ConnectionError as e:
            console.print(f"[!] Connection failed: {e}", style="bold red")
        except Exception as e:
            console.print(f"[!] An unexpected error occurred: {e}", style="bold red")
