from smb.SMBConnection import SMBConnection
from core.base_module import BaseModule
from rich.console import Console

class SmbLoginScanner(BaseModule):
    """Attempts to authenticate to an SMB service with given credentials."""

    def get_options(self):
        """
        Returns the options for this module.
        """
        return {
            'RHOST': ['', 'The target host IP address.'],
            'RPORT': [445, 'The target port.'],
            'USER': ['guest', 'The username to authenticate with.'],
            'PASSWORD': ['', 'The password for the user.']
        }

    def run(self, options):
        """
        Executes the SMB login check.
        """
        rhost = options.get('RHOST')
        rport = int(options.get('RPORT'))
        user = options.get('USER')
        password = options.get('PASSWORD')
        console = Console()

        if not rhost:
            console.print("[!] RHOST must be set.", style="bold red")
            return

        console.print(f"[*] Attempting SMB login on {rhost}:{rport} with user '{user}'...")

        try:
            conn = SMBConnection(user, password, 'pysploitx_client', 'pysploitx_server', use_ntlm_v2=True)
            is_connected = conn.connect(rhost, rport)

            if is_connected:
                console.print(f"[bold green][+] Success! Authentication successful for user '{user}'.[/bold green]")
                shares = conn.listShares()
                console.print("[*] Available shares:")
                for share in shares:
                    console.print(f"  - {share.name}")
                conn.close()
            else:
                console.print("[yellow][-] Authentication failed for user '{user}'.[/yellow]")

        except Exception as e:
            console.print(f"[!] An error occurred: {e}", style="bold red")
